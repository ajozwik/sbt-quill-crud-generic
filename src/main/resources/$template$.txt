__PACKAGE__

import io.getquill.NamingStrategy
import io.getquill.context.jdbc.JdbcContext
import io.getquill.context.sql.idiom.SqlIdiom
import __BEAN_PACKAGE__
import __ID_PACKAGE__
import pl.jozwik.quillgeneric.quillmacro.sync.{ QuillCrudWithContext, Repository }

import scala.util.Try

final class __REPOSITORY_NAME__[Dialect <: SqlIdiom, Naming <: NamingStrategy](
    protected val context: JdbcContext[Dialect, Naming] with QuillCrudWithContext,
    tableName: String
)
  extends Repository[__ID__, __BEAN__] {

  private implicit val dSchema: context.DynamicEntityQuery[__BEAN__] = {
      import context._
      context.dynamicQuerySchema[__BEAN__](tableName__COLUMN_MAPPING__)
    }

  override def all: Try[Seq[__BEAN__]] =
    context.all[__BEAN__]

  override def create(__BEAN__: __BEAN__, generateId: Boolean = false): Try[__ID__] =
    if (generateId) {
      context.createAndGenerateId[__ID__, __BEAN__](__BEAN__)
    } else {
      context.create[__ID__, __BEAN__](__BEAN__)
    }

  override def read(id: __ID__): Try[Option[__BEAN__]] =
    context.read[__ID__, __BEAN__](id)

  override def createOrUpdate(entity: __BEAN__, generateId: Boolean = false): Try[__ID__] =
    context.createOrUpdate[__ID__, __BEAN__](entity, generateId)

  override def update(__BEAN__: __BEAN__): Try[Long] =
    context.update[__BEAN__](__BEAN__)

  override def delete(id: __ID__): Try[Boolean] =
    context.deleteByFilter[__BEAN__](_.id == id)

}
